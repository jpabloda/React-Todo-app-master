{"version":3,"sources":["firebase.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TodoApp","useState","task","setTask","tasklist","setTaskList","useEffect","populate","data","collection","get","then","querySnapshot","forEach","doc","newData","console","log","indexOf","id","arr","catch","e","className","type","name","onChange","target","value","handleChange","placeholder","onClick","datas","set","isCompleted","map","t","preventDefault","element","findIndex","elem","newTaskList","taskCompleted","filter","delete","error","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2TAiBeA,G,MAdKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,iDACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGMC,aCqHRC,MA9Hf,WAAoB,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,OAEeF,mBAAS,IAFxB,mBAEVG,EAFU,KAEAC,EAFA,KAIjBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAW,SAACC,GAEhB,OADAH,EAAY,IACLhB,IACJU,YACAU,WAAW,SACXC,MACAC,MAAK,SAASC,GACbA,EAAcC,SAAQ,SAASC,GAC7B,IAAIC,EAAUD,EAAIN,OAClBQ,QAAQC,IAAIF,IAC0B,IAAlCX,EAASc,QAAQH,EAAQI,IAC3Bd,GAAY,SAACe,GACX,MAAM,GAAN,mBAAWA,GAAX,CAAgBL,OAGlBC,QAAQC,IAAI,uBAEdD,QAAQC,IAAI,4BAA6Bb,SAG5CiB,OAAM,SAACC,GAAD,OAAON,QAAQC,IAAIK,OA8D9B,OACE,yBAAKC,UAAU,QACb,2BACEC,KAAK,OACLC,KAAK,OACLN,GAAG,OACHO,SAAU,SAACJ,GAAD,OAjEK,SAACA,GACpBnB,EAAQmB,EAAEK,OAAOC,OAgEIC,CAAaP,IAC9BQ,YAAY,qBAEd,4BAAQP,UAAU,UAAUQ,QAhEhB,WACd,GAAa,KAAT7B,EAAa,CAIf,IAAM8B,EAAQ,CACZb,GAAI9B,IACDU,YACAU,WAAW,SACXK,MAAMK,IAGA9B,IAASU,YACjBU,WAAW,SACXK,IAAIkB,EAAMb,IACVc,IAAI,CAAEd,GAAIa,EAAMb,GAAIS,MAAO1B,EAAMgC,aAAa,IAC9CvB,MAAK,WACJJ,UA+CJ,QAGA,6BACCH,IAAa,GACZ,4BACGA,EAAS+B,KAAI,SAACC,GAAD,OACZ,wBAAIb,UAAWa,EAAEF,YAAc,YAAc,YAC1CE,EAAER,MACH,4BACEL,UAAU,YACVQ,QAAS,SAACT,GAAD,OArCD,SAACA,EAAGH,GACxBG,EAAEe,iBAEF,IAAMC,EAAUlC,EAASmC,WAAU,SAACC,GAAD,OAAUA,EAAKrB,IAAMA,KAGlDsB,EAAW,YAAOrC,GAGxBqC,EAAYH,GAAZ,2BACKG,EAAYH,IADjB,IAEEJ,aAAa,IAGf7B,EAAYoC,GAuBgBC,CAAcpB,EAAGc,EAAEjB,MAFrC,aAOA,4BAAQI,UAAU,SAASQ,QAAS,SAACT,GAAD,OAzD7B,SAACA,EAAGH,GACrBG,EAAEe,iBACFhC,EAAYD,EAASuC,QAAO,SAACP,GAAD,OAAOA,EAAEjB,IAAMA,MAC3CH,QAAQC,IAAIE,GAIV/B,EAAGqB,WAAW,SACXK,IAAIK,GACJyB,SACAvB,OAAM,SAACwB,GACN7B,QAAQ6B,MAAM1B,EAAI,8BA8C6B2B,CAAWxB,EAAGc,EAAEjB,MAA3D,eAMJ,OCjHK4B,MATf,WACE,OACE,yBAAKxB,UAAU,OACb,0BAAMA,UAAU,SAAhB,aADF,IAC2C,6BACzC,kBAAC,EAAD,QCIcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdzC,OAAM,SAAAwB,GACL7B,QAAQ6B,MAAMA,EAAMkB,c","file":"static/js/main.dac09bc2.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport \"@firebase/firestore\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyBgai-Q9U-Mhi8GWIvePtBQ3hbrqGtexCE\",\n  authDomain: \"todo-30f0d.firebaseapp.com\",\n  databaseURL: \"https://todo-30f0d-default-rtdb.firebaseio.com\",\n  projectId: \"todo-30f0d\",\n  storageBucket: \"todo-30f0d.appspot.com\",\n  messagingSenderId: \"35537129092\",\n  appId: \"1:35537129092:web:7394b6e6dcfd2d4ed97cd1\",\n  measurementId: \"G-2H0FBSHF0B\"\n});\n// Initialize Firebase\nconst db = firebaseApp.firestore();\n// const auth = firebase.auth();\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport \"./todoapp.css\";\nimport firebase from \"firebase\";\nimport db from \"../firebase\";\n\nfunction TodoApp() {\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n\n  useEffect(() => {\n    populate();\n  }, []);\n\n  const populate = (data) => {\n    setTaskList([]);\n    return firebase\n      .firestore()\n      .collection(\"todos\")\n      .get()\n      .then(function(querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n          let newData = doc.data();\n          console.log(newData);\n          if (tasklist.indexOf(newData.id) === -1) {\n            setTaskList((arr) => {\n              return [...arr, newData];\n            });\n          } else {\n            console.log(\"this is a duplicate\");\n          }\n          console.log(\"here are all of the todos\", tasklist);\n        });\n      })\n      .catch((e) => console.log(e));\n  };\n\n  const handleChange = (e) => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n    \n      // FIREBASE\n\n      const datas = {\n        id: firebase\n          .firestore()\n          .collection(\"todos\")\n          .doc().id,\n      };\n\n      const db = firebase.firestore();\n      db.collection(\"todos\")\n        .doc(datas.id)\n        .set({ id: datas.id, value: task, isCompleted: false })\n        .then(() => {\n          populate();\n        });\n      \n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter((t) => t.id != id));\n    console.log(id);\n\n    // DELETE\n\n      db.collection(\"todos\")\n        .doc(id)\n        .delete()\n        .catch((error) => {\n          console.error(id, \"Error removing document\");\n        })   \n  };\n\n  const taskCompleted = (e, id) => {\n    e.preventDefault();\n    //let's find index of element\n    const element = tasklist.findIndex((elem) => elem.id == id);\n\n    //copy array into new variable\n    const newTaskList = [...tasklist];\n\n    //edit our element\n    newTaskList[element] = {\n      ...newTaskList[element],\n      isCompleted: true,\n    };\n\n    setTaskList(newTaskList);\n  };\n\n  return (\n    <div className=\"todo\">\n      <input\n        type=\"text\"\n        name=\"text\"\n        id=\"text\"\n        onChange={(e) => handleChange(e)}\n        placeholder=\"Add task here...\"\n      />\n      <button className=\"add-btn\" onClick={AddTask}>\n        Addd\n      </button>\n      <br />\n      {tasklist !== [] ? (\n        <ul>\n          {tasklist.map((t) => (\n            <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n              {t.value}\n              <button\n                className=\"completed\"\n                onClick={(e) => taskCompleted(e, t.id)}\n              >\n                Completed\n              </button>\n\n              <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </div>\n  );\n}\n\nexport default TodoApp;","import React from \"react\";\nimport \"./App.css\";\nimport TodoApp from \"./components/TodoApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span className=\"title\">Todo List</span> <br />\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}